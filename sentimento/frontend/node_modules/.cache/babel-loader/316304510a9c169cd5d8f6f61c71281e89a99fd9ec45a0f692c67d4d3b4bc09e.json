{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anthony Lupica\\\\source\\\\repos\\\\sentimento\\\\sentimento\\\\frontend\\\\src\\\\components\\\\DarkLightToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../DarkLightToggle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DarkLightToggle() {\n  _s();\n  /*\r\n     theme = holds current state\r\n     toggleTheme = function to change current state\r\n     useState(false) = passes in initial state for theme of 'Light'\r\n  */\n  const [theme, toggleTheme] = useState('Light');\n\n  // toggler gets called on button click, and simply switches the theme\n  const toggler = () => {\n    if (theme === 'Light') {\n      toggleTheme('Dark');\n    } else {\n      toggleTheme('Light');\n    }\n  };\n\n  // useEffect hook to switch classNames and make decisions according to theme state\n  useEffect(() => {\n    // switch class names for theme switch \n    document.body.className = \"body\" + theme;\n    document.getElementById(\"nav\").className = \"nav\" + theme;\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"DarkLight\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      onClick: toggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"toggler round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(DarkLightToggle, \"ORSIu+s/BFdaILsMNtu3eTAsxI4=\");\n_c = DarkLightToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkLightToggle\");","map":{"version":3,"names":["React","useState","useEffect","DarkLightToggle","theme","toggleTheme","toggler","document","body","className","getElementById"],"sources":["C:/Users/Anthony Lupica/source/repos/sentimento/sentimento/frontend/src/components/DarkLightToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../DarkLightToggle.css';\r\n\r\nexport default function DarkLightToggle() {\r\n\r\n    /*\r\n       theme = holds current state\r\n       toggleTheme = function to change current state\r\n       useState(false) = passes in initial state for theme of 'Light'\r\n    */\r\n    const [theme, toggleTheme] = useState('Light');\r\n\r\n    // toggler gets called on button click, and simply switches the theme\r\n    const toggler = () => {\r\n        if (theme === 'Light') {\r\n            toggleTheme('Dark');\r\n        } else {\r\n            toggleTheme('Light');\r\n        }\r\n    };\r\n\r\n    // useEffect hook to switch classNames and make decisions according to theme state\r\n    useEffect(() => {\r\n\r\n        // switch class names for theme switch \r\n        document.body.className = \"body\" + theme;\r\n        document.getElementById(\"nav\").className = \"nav\" + theme;\r\n\r\n\r\n    }, [theme]);\r\n\r\n    return (\r\n        <label className=\"DarkLight\">\r\n          <input type=\"checkbox\" onClick={toggler} />\r\n          <span className=\"toggler round\"></span>\r\n        </label>\r\n    )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,wBAAwB;AAAC;AAEhC,eAAe,SAASC,eAAe,GAAG;EAAA;EAEtC;AACJ;AACA;AACA;AACA;EACI,MAAM,CAACC,KAAK,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,OAAO,CAAC;;EAE9C;EACA,MAAMK,OAAO,GAAG,MAAM;IAClB,IAAIF,KAAK,KAAK,OAAO,EAAE;MACnBC,WAAW,CAAC,MAAM,CAAC;IACvB,CAAC,MAAM;MACHA,WAAW,CAAC,OAAO,CAAC;IACxB;EACJ,CAAC;;EAED;EACAH,SAAS,CAAC,MAAM;IAEZ;IACAK,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAG,MAAM,GAAGL,KAAK;IACxCG,QAAQ,CAACG,cAAc,CAAC,KAAK,CAAC,CAACD,SAAS,GAAG,KAAK,GAAGL,KAAK;EAG5D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACI;IAAO,SAAS,EAAC,WAAW;IAAA,wBAC1B;MAAO,IAAI,EAAC,UAAU;MAAC,OAAO,EAAEE;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3C;MAAM,SAAS,EAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACjC;AAEhB;AAAC,GAlCuBH,eAAe;AAAA,KAAfA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}